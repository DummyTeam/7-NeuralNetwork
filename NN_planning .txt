Default version:

	NeuralNetwork nn = NeuralNetwork(numberOfLayers);
	
	nn[0].populateNeurons(numberOfNeurons1);
	nn[1].populateNeurons(numberOfNeurons2);
	nn[2].populateNeurons(numberOfNeurons3);
	...
	...
	...
	nn[numberOfLayers - 1].populateNeurons(numberOfNeuronsN);
	
	nn.buildWeightConnections();

	vector<double> inputValues; // Size of this should be equal to the number of neurons in input layer of nn
	
	vector<double> outputValues = nn.predict(inputValues);
	
//////////////////////////////////////////////////////////////

Regular version:

	NeuralNetwork* neuralNetwork = new NeuralNetwork();

	Layer* inputLayer = new Layer();
	Layer* hiddenLayer = new Layer();
	Layer* outputLayer = new Layer();
	
	inputLayer->populateNeurons(2);
	hiddenLayer->populateNeurons(4);
	outputLayer->populateNeurons(3);
	
	neuralNetwork->addLayer(inputLayer);
	neuralNetwork->addLayer(hiddenLayer);
	neuralNetwork->addLayer(outputLayer);
	
	neuralNetwork->buildWeightConnections(); // Initialized weights and biases
	
	// <Training>
	
	neuralNetwork->train(trainingData);
		- trainingData is  a two dimensional vector; (trainingData[cases][sample_data_of_the_case])
		- train takes samples vector by vector
		- runs it through predict function
		- takes the results and calculate the cost
		- run backpropogation (updates weights and biases)

	
	// </Training>
	
	vector<double> results = neuralNetwork->predict(input);
	
	
	cout << neuralNetwork->toString();
	
//////////////////////////////////////////////////////////////
	
 - Create a neural network
 - Create a layer
	- Creating a layer, Create neurons automatically
		- Creating neurons automatically, Check their types 
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			